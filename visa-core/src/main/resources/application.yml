
quarkus:
  http:
    root-path: /api
    port: ${VISA_SERVER_PORT:8086}
    host: ${VISA_SERVER_HOST:localhost}
    test-port: 8081
    test-ssl-port: 8446
    cors:
      ~: true
      origins:  ${VISA_CORS_ORIGIN:*}
      methods: GET,POST,PATCH,PUT,DELETE,OPTIONS
#      headers: Authorisation,Content-Type
  hibernate-orm:
    database:
      generation: update
    log:
      sql: false
    persistence-xml:
      ignore: true
  scheduler:
    enabled: ${VISA_SCHEDULER_ENABLED:true}
  mailer:
    host: ${VISA_NOTIFICATION_EMAIL_ADAPTER_HOST}
    port: ${VISA_NOTIFICATION_EMAIL_ADAPTER_PORT}
  native:
    resources:
      includes: fixtures/**.sql,words/**.txt,emails/templates/**.twig

cloud:
  serverNamePrefix: ${VISA_CLOUD_SERVER_NAME_PREFIX}
  providerType: ${VISA_DEFAULT_CLOUD_PROVIDER_TYPE:openstack}
  providerName: ${VISA_DEFAULT_CLOUD_PROVIDER_NAME:Default}
  providers:
    - name: openstack
      parameters:
        identityEndpoint: ${VISA_CLOUD_IDENTITY_ENDPOINT}
        computeEndpoint: ${VISA_CLOUD_COMPUTE_ENDPOINT}
        imageEndpoint: ${VISA_CLOUD_IMAGE_ENDPOINT}
        networkEndpoint: ${VISA_CLOUD_NETWORK_ENDPOINT}
        applicationId: ${VISA_CLOUD_APPLICATION_ID}
        applicationSecret: ${VISA_CLOUD_APPLICATION_SECRET}
        addressProvider: ${VISA_CLOUD_ADDRESS_PROVIDER}
        addressProviderUUID: ${VISA_CLOUD_ADDRESS_PROVIDER_UUID}
    - name: web
      parameters:
        url: ${VISA_CLOUD_WEB_PROVIDER_URL}
        authToken: ${VISA_CLOUD_WEB_PROVIDER_AUTH_TOKEN}

business:
  numberInstanceActionThreads: 16
  instance:
    # Defaults to 14 days
    userMaxLifetimeDurationHours: ${VISA_INSTANCE_USER_MAX_LIFETIME_DURATION_HOURS:336}
    # Defaults to 60 days
    staffMaxLifetimeDurationHours: ${VISA_INSTANCE_STAFF_MAX_LIFETIME_DURATION_HOURS:1440}
    # Defaults to 4 days
    userMaxInactivityDurationHours: ${VISA_INSTANCE_USER_MAX_INACTIVITY_DURATION_HOURS:96}
    # Defaults to 8 days
    staffMaxInactivityDurationHours: ${VISA_INSTANCE_STAFF_MAX_INACTIVITY_DURATION_HOURS:192}
    defaultUserInstanceQuota: ${VISA_INSTANCE_USER_DEFAULT_QUOTA:2}
    activityRetentionPeriodDays: ${VISA_INSTANCE_ACTIVITY_RETENTION_PERIOD_DAYS:0}
  mailer:
    rootURL: ${VISA_ROOT_URL}
    enabled: ${VISA_NOTIFICATION_EMAIL_ADAPTER_ENABLED:false}
    fromEmailAddress: ${VISA_NOTIFICATION_EMAIL_ADAPTER_FROM_EMAIL_ADDRESS}
    bccEmailAddress: ${VISA_NOTIFICATION_EMAIL_ADAPTER_BCC_EMAIL_ADDRESS:}
    devEmailAddress: ${VISA_NOTIFICATION_EMAIL_ADAPTER_DEV_EMAIL_ADDRESS:}
    adminEmailAddress: ${VISA_NOTIFICATION_EMAIL_ADAPTER_ADMIN_EMAIL_ADDRESS:}
    emailTemplatesDirectory: ${VISA_NOTIFICATION_EMAIL_ADAPTER_TEMPLATES_DIRECTORY:emails/templates/}
  signature:
    privateKeyPath: ${VISA_VDI_SIGNATURE_PRIVATE_KEY_PATH}
    publicKeyPath: ${VISA_VDI_SIGNATURE_PUBLIC_KEY_PATH}
  securityGroupServiceClient:
    enabled: ${VISA_SECURITY_GROUP_SERVICE_CLIENT_ENABLED:false}
    url: ${VISA_SECURITY_GROUP_SERVICE_CLIENT_URL}
    authToken: ${VISA_SECURITY_GROUP_SERVICE_CLIENT_AUTH_TOKEN}

vdi:
  enabled: ${VISA_VDI_ENABLED:true}
  host: ${VISA_VDI_HOST:localhost}
  port: ${VISA_VDI_PORT:8087}
  corsOrigin: ${VISA_VDI_CORS_ORIGIN:*}
  redisEnabled: ${VISA_VDI_REDIS_ENABLED:false}
  redisURL: ${VISA_VDI_REDIS_URL}
  redisPassword: ${VISA_VDI_REDIS_PASSWORD}
  redisDatabase: ${VISA_VDI_REDIS_DATABASE:0}
  ownerDisconnectionPolicy: ${VISA_VDI_OWNER_DISCONNECTION_POLICY:DISCONNECT_ALL}
  cleanupSessionsOnStartup: ${VISA_VDI_CLEANUP_SESSIONS_ON_STARTUP:false}
  # in milliseconds....
  pingTimeout: ${VISA_VDI_PING_TIMEOUT:15000}
  # in milliseconds...
  pingInterval: ${VISA_VDI_PING_INTERVAL:3000}
  protocol: ${VISA_VDI_GUACD_PARAMETER_PROTOCOL:rdp}
  guacd:
    ignore-cert: ${VISA_VDI_GUACD_PARAMETER_IGNORE_CERT:true}
    port: ${VISA_VDI_GUACD_PARAMETER_PORT:3389}

security:
  token:
    accountsUrl: ${VISA_ACCOUNTS_SERVICE_CLIENT_URL}

client:
  login:
    issuer: ${VISA_CLIENT_CONFIG_LOGIN_ISSUER}
    clientId: ${VISA_CLIENT_CONFIG_LOGIN_CLIENT_ID}
    scope: ${VISA_CLIENT_CONFIG_LOGIN_SCOPE:openid offline_access}
    showDebugInformation: ${VISA_CLIENT_CONFIG_LOGIN_SHOW_DEBUG_INFORMATION:false}
    sessionChecksEnabled: ${VISA_CLIENT_CONFIG_LOGIN_SESSION_CHECKS_ENABLED:true}
  analytics:
    enabled: ${VISA_CLIENT_CONFIG_ANALYTICS_ENABLED:false}
    url: ${VISA_CLIENT_CONFIG_ANALYTICS_URL}
    siteId: ${VISA_CLIENT_CONFIG_ANALYTICS_SITE_ID}
  desktop:
    allowedClipboardUrlHosts: ${VISA_CLIENT_CONFIG_DESKTOP_ALLOWED_CLIPBOARD_URL_HOSTS:[]}
    keyboardLayouts: ${VISA_CLIENT_CONFIG_DESKTOP_KEYBOARD_LAYOUTS:[]}
  contactEmail: ${VISA_CLIENT_CONFIG_CONTACT_EMAIL}
  experiments:
    openDataIncluded: ${VISA_CLIENT_CONFIG_INCLUDE_OPEN_DATA:false}

graphql:
  tracing: ${VISA_GRAPHQL_TRACING_ENABLED:false}
  resultsLimit: 50
  files:
    - graphql/inputs.graphql
    - graphql/types.graphql
    - graphql/schema.graphql

"%prod":
  quarkus:
    datasource:
      username: ${VISA_DATABASE_USERNAME}
      password: ${VISA_DATABASE_PASSWORD}
      jdbc:
        url: ${VISA_DATABASE_URL}
      db-kind: postgresql
      devservices:
        enabled: false
    log:
      category:
        "eu.ill":
          level: ${VISA_LOGGING_LEVEL:INFO}

"%dev":
  quarkus:
    datasource:
      username: ${VISA_DATABASE_USERNAME}
      password: ${VISA_DATABASE_PASSWORD}
      jdbc:
        url: ${VISA_DATABASE_URL}
      db-kind: postgresql
      devservices:
        enabled: false
    log:
      category:
        "eu.ill":
          level: ${VISA_LOGGING_LEVEL:INFO}

"%test":
  quarkus:
    scheduler:
      enabled: false
    log:
      level: info
    hibernate-orm:
      log:
        sql: false
      database:
        generation: create
      sql-load-script: fixtures.sql
      persistence-xml:
        ignore: true
    datasource:
      devservices:
        enabled: true
    mailer:
      mock: true
    devservices:
      timeout: 5m

  business:
    securityGroupServiceClient:
      enabled: false
    mailer:
      enabled: false

  cloud:
    serverNamePrefix: visa-instance
    providerType: null
    providerName: Default
