server:
  applicationConnectors:
    - type: http
      port: ${VISA_SERVER_PORT:-8080}
      bindHost: ${VISA_SERVER_HOST:-'localhost'}
  adminConnectors: [ ]
  rootPath: '/api/*'

corsOrigin: ${VISA_CORS_ORIGIN:-'*'}

database:
  driverClass: org.postgresql.Driver
  user: ${VISA_DATABASE_USERNAME}
  password: ${VISA_DATABASE_PASSWORD}
  url: ${VISA_DATABASE_URL}
  properties:
    charSet: UTF-8
    hibernate.show_sql: false
    hibernate.hbm2ddl.auto: update
    hibernate.connection.useSSL: false
    hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate.enable_lazy_load_no_trans: true
  # the maximum amount of time to wait on an empty pool before throwing an exception
  maxWaitForConnection: 1s
  # the SQL query to run when validating a session's liveness
  validationQuery: "SELECT 1"
  # the timeout before geda session validation queries fail
  validationQueryTimeout: 3s
  # the initial size of connections
  initialSize: 10
  # the minimum identifier of connections to keep open
  minSize: 10
  # the maximum identifier of connections to keep open
  maxSize: 16
  # whether or not idle connections should be validated
  checkConnectionWhileIdle: true
  # the amount of time to sleep between runs of the idle session validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s
  # the minimum amount of time an session must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute

logging:
  level: ${VISA_LOGGING_LEVEL:-INFO}
  loggers:
    org.apache.guacamole: DEBUG
    io.dropwizard: INFO
    eu.ill.visa: INFO
    org.hibernate.sql: DEBUG
  appenders:
    - type: console
      logFormat: "%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) [%-40.40logger{10}] - %msg%n"
    - type: email
      host: ${VISA_LOGGING_EMAIL_APPENDER_HOST}
      port: ${VISA_LOGGING_EMAIL_APPENDER_PORT:-25}
      ssl: ${VISA_LOGGING_EMAIL_APPENDER_SSL:-false}
      tls: ${VISA_LOGGING_EMAIL_APPENDER_TLS:-false}
      to:
        - ${VISA_LOGGING_EMAIL_APPENDER_RECIPIENT_ADDRESS}
      from: ${VISA_LOGGING_EMAIL_APPENDER_FROM_ADDRESS}
      subject: "${VISA_LOGGING_EMAIL_SUBJECT}"
      includeCallerData: true
    - type: file
      threshold: ${VISA_LOGGING_FILE_THRESHOLD:-'INFO'}
      maxFileSize: ${VISA_LOGGING_FILE_MAX_FILE_SIZE:-'100MB'}
      currentLogFilename: ${VISA_LOGGING_FILE_DIRECTORY}/application.log
      archivedLogFilenamePattern: ${VISA_LOGGING_FILE_DIRECTORY}/application-%i.log.gz
      archivedFileCount: ${VISA_LOGGING_FILE_ARCHIVED_FILE_COUNT:-1}
      logFormat: "${VISA_LOGGING_FILE_FORMAT}"
      timeZone: ${VISA_LOGGING_TIMEZONE:-'CET'}
    - type: syslog
      host: ${VISA_LOGGING_SYSLOG_HOST}
      port: ${VISA_LOGGING_SYSLOG_PORT:-514}
      facility: ${VISA_LOGGING_SYSLOG_FACILITY:-'local0'}
      threshold: ${VISA_LOGGING_SYSLOG_THRESHOLD:-'INFO'}
      stackTracePrefix: \t
      logFormat: "${VISA_LOGGING_SYSLOG_FORMAT}"
      timeZone: ${VISA_LOGGING_TIMEZONE:-'CET'}

security:
  token:
    accountsUrl: ${VISA_ACCOUNTS_SERVICE_CLIENT_URL}

cloud:
  serverNamePrefix: ${VISA_CLOUD_SERVER_NAME_PREFIX}
  providerType: ${VISA_DEFAULT_CLOUD_PROVIDER_TYPE:-'openstack'}
  providerName: ${VISA_DEFAULT_CLOUD_PROVIDER_NAME:-'Default'}
  providers:
    - name: openstack
      parameters:
        identityEndpoint: ${VISA_CLOUD_IDENTITY_ENDPOINT}
        computeEndpoint: ${VISA_CLOUD_COMPUTE_ENDPOINT}
        imageEndpoint: ${VISA_CLOUD_IMAGE_ENDPOINT}
        networkEndpoint: ${VISA_CLOUD_NETWORK_ENDPOINT}
        applicationId: ${VISA_CLOUD_APPLICATION_ID}
        applicationSecret: ${VISA_CLOUD_APPLICATION_SECRET}
        addressProvider: ${VISA_CLOUD_ADDRESS_PROVIDER}
        addressProviderUUID: ${VISA_CLOUD_ADDRESS_PROVIDER_UUID}
    - name: web
      parameters:
        url: ${VISA_CLOUD_WEB_PROVIDER_URL}
        authToken: ${VISA_CLOUD_WEB_PROVIDER_AUTH_TOKEN}

vdi:
  host: ${VISA_VDI_HOST:-'localhost'}
  port: ${VISA_VDI_PORT:-8087}
  corsOrigin: ${VISA_VDI_CORS_ORIGIN}
  enabled: ${VISA_VDI_ENABLED:-true}
  redisEnabled: ${VISA_VDI_REDIS_ENABLED:-false}
  redisURL: ${VISA_VDI_REDIS_URL}
  redisPassword: ${VISA_VDI_REDIS_PASSWORD}
  redisDatabase: ${VISA_VDI_REDIS_DATABASE:-0}
  ownerDisconnectionPolicy: ${VISA_VDI_OWNER_DISCONNECTION_POLICY:-'DISCONNECT_ALL'}
  cleanupSessionsOnStartup: ${VISA_VDI_CLEANUP_SESSIONS_ON_STARTUP:-false}
  # in milliseconds....
  pingTimeout: ${VISA_VDI_PING_TIMEOUT:-15000}
  # in milliseconds...
  pingInterval: ${VISA_VDI_PING_INTERVAL:-3000}
  protocol: ${VISA_VDI_GUACD_PARAMETER_PROTOCOL:-'rdp'}
  guacd:
    ignore-cert: ${VISA_VDI_GUACD_PARAMETER_IGNORE_CERT:-true}
    port: ${VISA_VDI_GUACD_PARAMETER_PORT:-3389}

scheduler:
  enabled: ${VISA_SCHEDULER_ENABLED:-true}
  taskManager:
    numberThreads: ${VISA_SCHEDULER_TASK_MANAGER_NUMBER_THREADS:-5}

business:
  numberInstanceActionThreads: 16
  instance:
    # Defaults to 14 days
    userMaxLifetimeDurationHours: ${VISA_INSTANCE_USER_MAX_LIFETIME_DURATION_HOURS:-336}
    # Defaults to 60 days
    staffMaxLifetimeDurationHours: ${VISA_INSTANCE_STAFF_MAX_LIFETIME_DURATION_HOURS:-1440}
    # Defaults to 4 days
    userMaxInactivityDurationHours: ${VISA_INSTANCE_USER_MAX_INACTIVITY_DURATION_HOURS:-96}
    # Defaults to 8 days
    staffMaxInactivityDurationHours: ${VISA_INSTANCE_STAFF_MAX_INACTIVITY_DURATION_HOURS:-192}
  rootURL: ${VISA_ROOT_URL}
  notifications:
    - adapter: email
      enabled: ${VISA_NOTIFICATION_EMAIL_ADAPTER_ENABLED:-false}
      parameters:
        host: ${VISA_NOTIFICATION_EMAIL_ADAPTER_HOST}
        port: ${VISA_NOTIFICATION_EMAIL_ADAPTER_PORT}
        fromEmailAddress: ${VISA_NOTIFICATION_EMAIL_ADAPTER_FROM_EMAIL_ADDRESS}
        bccEmailAddress: ${VISA_NOTIFICATION_EMAIL_ADAPTER_BCC_EMAIL_ADDRESS:-null}
        devEmailAddress: ${VISA_NOTIFICATION_EMAIL_ADAPTER_DEV_EMAIL_ADDRESS:-""}
        adminEmailAddress: ${VISA_NOTIFICATION_EMAIL_ADAPTER_ADMIN_EMAIL_ADDRESS:-""}
        emailTemplatesDirectory: ${VISA_NOTIFICATION_EMAIL_ADAPTER_TEMPLATES_DIRECTORY:-"emails/templates/"}
  signature:
    privateKeyPath: ${VISA_VDI_SIGNATURE_PRIVATE_KEY_PATH}
    publicKeyPath: ${VISA_VDI_SIGNATURE_PUBLIC_KEY_PATH}
  securityGroupServiceClient:
    enabled: ${VISA_SECURITY_GROUP_SERVICE_CLIENT_ENABLED:-false}
    url: ${VISA_SECURITY_GROUP_SERVICE_CLIENT_URL}
    authToken: ${VISA_SECURITY_GROUP_SERVICE_CLIENT_AUTH_TOKEN}
graphql:
  tracing: ${VISA_GRAPHQL_TRACING_ENABLED:-false}
  resultsLimit: 50
  files:
    - graphql/inputs.graphql
    - graphql/types.graphql
    - graphql/schema.graphql

client:
  login:
    issuer: ${VISA_CLIENT_CONFIG_LOGIN_ISSUER}
    clientId: ${VISA_CLIENT_CONFIG_LOGIN_CLIENT_ID}
    scope: ${VISA_CLIENT_CONFIG_LOGIN_SCOPE:-'openid offline_access'}
    showDebugInformation: ${VISA_CLIENT_CONFIG_LOGIN_SHOW_DEBUG_INFORMATION:-false}
    sessionChecksEnabled: ${VISA_CLIENT_CONFIG_LOGIN_SESSION_CHECKS_ENABLED:-true}
  analytics:
    enabled: ${VISA_CLIENT_CONFIG_ANALYTICS_ENABLED:-false}
    url: ${VISA_CLIENT_CONFIG_ANALYTICS_URL:-null}
    siteId: ${VISA_CLIENT_CONFIG_ANALYTICS_SITE_ID:-null}
  desktop:
    allowedClipboardUrlHosts: ${VISA_CLIENT_CONFIG_DESKTOP_ALLOWED_CLIPBOARD_URL_HOSTS:-[]}
    keyboardLayouts: ${VISA_CLIENT_CONFIG_DESKTOP_KEYBOARD_LAYOUTS:-[]}
  contactEmail: ${VISA_CLIENT_CONFIG_CONTACT_EMAIL:-null}
  experiments:
    openDataIncluded: ${VISA_CLIENT_CONFIG_INCLUDE_OPEN_DATA:-false}
