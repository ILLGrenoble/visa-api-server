<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd"
                 version="2.2">

    <named-query name="securityGroup.getById">
        <query>
            SELECT sg
            FROM SecurityGroup sg
            LEFT JOIN sg.cloudProviderConfiguration cpc
            WHERE sg.id = :id
            AND cpc.deletedAt IS NULL
        </query>
    </named-query>

    <named-query name="securityGroup.getAll">
        <query>
            SELECT sg
            FROM SecurityGroup sg
            LEFT JOIN sg.cloudProviderConfiguration cpc
            WHERE cpc.deletedAt IS NULL
            ORDER BY sg.name
        </query>
    </named-query>

    <named-query name="securityGroup.getByName">
        <query>
            SELECT sg
            FROM SecurityGroup sg
            LEFT JOIN sg.cloudProviderConfiguration cpc
            WHERE sg.name = :name
            AND cpc.deletedAt IS NULL
        </query>
    </named-query>

    <named-query name="securityGroup.countAll">
        <query>
            SELECT count(sg.id)
            FROM SecurityGroup sg
            LEFT JOIN sg.cloudProviderConfiguration cpc
            WHERE cpc.deletedAt IS NULL
        </query>
    </named-query>

    <named-query name="securityGroup.getDefaultSecurityGroups">
        <query>
            SELECT DISTINCT sg
            FROM SecurityGroup sg
            LEFT JOIN sg.cloudProviderConfiguration cpc
            LEFT OUTER JOIN SecurityGroupFilter sgf ON sgf.securityGroup = sg
            WHERE sgf.objectId IS NULL
            AND cpc.deletedAt IS NULL
        </query>
    </named-query>

    <named-native-query name="securityGroup.getRoleBasedSecurityGroups"
                        result-class="eu.ill.visa.core.domain.SecurityGroup">
        <query>
            <![CDATA[
                SELECT DISTINCT sg.id, sg.name, sg.cloud_provider_configuration_id
                FROM security_group sg
                LEFT JOIN cloud_provider_configuration cpc ON sg.cloud_provider_configuration_id = cpc.id
                LEFT JOIN security_group_filter sgf ON sg.id = sgf.security_group_id
                LEFT JOIN role r ON r.id = sgf.object_id
                LEFT JOIN user_role ur ON r.id = ur.role_id
                LEFT JOIN users u ON ur.user_id = u.id
                WHERE sgf.object_type = 'ROLE'
                AND r.group_deleted_at IS NULL
                AND u.id = :userId
                AND cpc.deleted_at IS NULL
            ]]>
        </query>
    </named-native-query>

    <named-native-query name="securityGroup.getFlavourBasedSecurityGroups"
                        result-class="eu.ill.visa.core.domain.SecurityGroup">
        <query>
            <![CDATA[
                SELECT DISTINCT sg.id, sg.name, sg.cloud_provider_configuration_id
                FROM security_group sg
                LEFT JOIN cloud_provider_configuration cpc ON sg.cloud_provider_configuration_id = cpc.id
                LEFT JOIN security_group_filter sgf ON sg.id = sgf.security_group_id
                LEFT JOIN flavour f ON f.id = sgf.object_id
                WHERE sgf.object_type = 'FLAVOUR'
                AND f.deleted = false
                AND cpc.deleted_at IS NULL
            ]]>
        </query>
    </named-native-query>

    <entity class="eu.ill.visa.core.domain.SecurityGroup">
        <table name="security_group"/>
        <attributes>
            <id name="id">
                <column name="id" nullable="false"/>
                <generated-value strategy="IDENTITY"/>
            </id>
            <basic name="name">
                <column name="name" length="250" nullable="false"/>
            </basic>
            <many-to-one name="cloudProviderConfiguration" >
                <join-column name="cloud_provider_configuration_id" nullable="true"/>
                <foreign-key name="fk_cloud_provider_configuration_id"/>
            </many-to-one>
        </attributes>
    </entity>

</entity-mappings>
