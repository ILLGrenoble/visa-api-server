#!/usr/bin/env python

import namesgenerator
import argparse
import os
import requests
import time
import sys

parser = argparse.ArgumentParser(description='Create instances')
parser.add_argument('--count', type=int, required=True, help='How many instances to create?')
parser.add_argument('--delay', type=int, required=True, help='Delay to wait before creating another instance')
parser.add_argument('--screen-width', required=True, type=int)
parser.add_argument('--screen-height', required=True, type=int)
parser.add_argument('--keyboard-layout', required=False, default="en-gb-qwerty")
parser.add_argument('--server', required=True)
parser.add_argument('--plan', required=True, type=int, help='The plan id')

args = parser.parse_args()

delay = int(args.delay)
count = int(args.count)
screen_width = args.screen_width
screen_height = args.screen_height
server = args.server
keyboard_layout = args.keyboard_layout
plan = int(args.plan)
token = os.getenv('TOKEN')

if token is None:
    print("Please set the TOKEN env variable to a valid JWT token")
    sys.exit()

for n in range(count):
    name = namesgenerator.get_random_name()
    print("Creating instance: %s" % (name))
    response = requests.post('%s/api/account/instances' % (server),
                            json={
                                "name":name,
                                "screenWidth":screen_width,
                                "screenHeight":screen_height,
                                "comments": "",
                                "experiments":[],
                                "planId":plan,
                                "keyboardLayout": keyboard_layout,
                                "acceptedTerms": 'true'
                            },
                            verify=False,
                            headers={
                                'Authorization': 'bearer %s' % (token),
                                'Content-type': 'application/json',
                                'Accept': 'application/json'})
    if response.status_code == 200:
        print("Successfully created instance. Waiting %d seconds before creating a new instance..." % (delay))
    else:
        print("Could not create instance. Got error: %s. Exiting" % (response.content))
        sys.exit()
    time.sleep(delay)
